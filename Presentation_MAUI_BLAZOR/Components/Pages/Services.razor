@page "/services"

<div class=@(addServiceMenuOpened ? "hidden" : "top-bar")>
    <div class="top-bar-addservice-text" @onclick="()=>{addServiceMenuOpened = !addServiceMenuOpened;}">
        <h6>Add service </h6><h2>&#43;</h2>
    </div>
</div>
<div class=@(addServiceMenuOpened ? "top-bar add-service" : "hidden")>
    <div class="top-bar-label">
        <h5>Add service</h5>
        <button type="button" @onclick="()=>{addServiceMenuOpened = !addServiceMenuOpened;}">Cancel</button>
    </div>

    <div class="add-service-input-container">
        <div >
            <div class="add-service-input-field">
                <p>Service description <span>(required)</span></p>
                <InputText @bind-Value="_registrationForm.Name" typeof="text" placeholder="Service description..." class="@(DescriptionInvalid ? "invalid" : "")" />
            </div>
            <div class="add-service-input-field">
                <p>Cost per hour <span>(required)</span></p>
                <div>
                    <span>$</span>
                    <InputNumber @bind-Value="_registrationForm.PricePerHour" placeholder="Cost..." class="@(CostInvalid ? "invalid" : "")" />
                </div>
            </div>
        </div>

        <button type="button" @onclick="SubmitInputs">Add service</button>
    </div>
</div>

<div class="customer-list-container">
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Service</th>
                <th>Cost per hour</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (Service service in _servicelist)
            {
                @if (editModeEnabled && selectedService == service)
                {
                    <td class="py-4">@service.Id</td>
                    <td class="py-4"><InputText @bind-Value="@service.Name" typeof="text" placeholder="Service...." class="@(EditModeDescriptionInvalid ? "invalid" : "")" /></td>
                    <td class="py-4">
                        <div>
                            <span>$</span>
                            <InputNumber @bind-Value="@service.PricePerHour" typeof="text" placeholder="Cost..." class="@(EditModeCostInvalid ? "invalid" : "")" />
                        </div>
                    </td>
                    <td class="py-4">
                        @if (!deleteConfirmEnabled)
                        {
                        <button @onclick="async ()=>{await SaveUpdatedToDb(service);}">Save</button>
                            <button @onclick="async ()=>{await UpdateServiceList();}">Cancel</button>
                            <button @onclick="()=>{deleteConfirmEnabled = true;}">Remove</button>
                        }
                        else
                        {
                            <p>Confirm delete</p>
                        <button @onclick="async ()=>{await RemoveService(service);}">Remove</button>
                            <button @onclick="()=>{deleteConfirmEnabled = false;}">Cancel</button>
                        }
                    </td>
                }
                else
                {
                    <tr class="hover-darken">
                        <td @onclick="()=>{ToogleSelectedService(service);}">@service.Id</td>
                        <td @onclick="()=>{ToogleSelectedService(service);}">@service.Name</td>
                    <td @onclick="()=>{ToogleSelectedService(service);}">@decimal.Round(service.PricePerHour,2)$</td>
                        <td><button @onclick="()=>{editModeEnabled = true; selectedService = service;}">Modify</button></td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@code {
    private ServiceRegistrationForm _registrationForm = new();
    private List<Service> _servicelist = [];
    private bool addServiceMenuOpened = false;
    private bool editModeEnabled = false;
    private bool deleteConfirmEnabled = false;
    private Service selectedService = null!;

    private bool DescriptionInvalid = false;
    private bool CostInvalid = false;
    private bool EditModeDescriptionInvalid = false;
    private bool EditModeCostInvalid = false;

    protected override async Task OnInitializedAsync()
    {
        await UpdateServiceList();
    }

    private void ToogleSelectedService(Service service)
    {
        if (selectedService == service)
        {
            service = null!;
        }
        else
            selectedService = service;
    }

    private async Task UpdateServiceList()
    {
        deleteConfirmEnabled = false;
        editModeEnabled = false;
        selectedService = null!;
        var services = await _serviceService.GetAllAsync();
        _servicelist = services.ToList();
    }

    private async Task SubmitInputs()
    {
        if (CheckInputs())
            return;

        var result = await _serviceService.CreateAsync(_registrationForm);
        if (result != null)
        {
            ServiceAdded();
            await UpdateServiceList();
        }
    }

    private bool CheckInputs()
    {
        bool InvalidExists = false;
        DescriptionInvalid = false;
        CostInvalid = false;

        if (string.IsNullOrWhiteSpace(_registrationForm.Name))
        {
            DescriptionInvalid = true;
            InvalidExists = true;
        }
        else
            _registrationForm.Name = _registrationForm.Name.Trim();

        if (_registrationForm.PricePerHour <= 0)
        {
            CostInvalid = true;
            InvalidExists = true;
        }

        return InvalidExists;
    }

    private bool CheckUpdatedInputs()
    {
        bool InvalidExists = false;
        EditModeDescriptionInvalid = false;
        EditModeCostInvalid = false;

        if (string.IsNullOrWhiteSpace(selectedService.Name))
        {
            EditModeDescriptionInvalid = true;
            InvalidExists = true;
        }
        else
            selectedService.Name = selectedService.Name.Trim();

        if (selectedService.PricePerHour <= 0)
        {
            EditModeCostInvalid = true;
            InvalidExists = true;
        }

        return InvalidExists;
    }

    private void ServiceAdded()
    {
        _registrationForm = new();
        addServiceMenuOpened = false;
    }

    private async Task SaveUpdatedToDb(Service service)
    {
        if (CheckUpdatedInputs())
            return;

        await _serviceService.Update(service);
        await UpdateServiceList();
        editModeEnabled = false;
        selectedService = null!;
    }

    private async Task RemoveService(Service service)
    {
        await _serviceService.Delete(service);
        editModeEnabled = false;
        selectedService = null!;
        await UpdateServiceList();
    }

    private void NavigateToProject(int projectId)
    {
        NavigationManager.NavigateTo($"/projectview/{projectId}");
    }
}
