@page "/projects/register"
@inject IJSRuntime JSRuntime

<div class="top-bar" @onclick="async ()=>{await NavigateBack();}">
    <div class="top-bar-goback-text">
        <h6>Go back</h6><h2>&#8617;</h2>
    </div>
</div>

<div class="outer-wrapper">
    <div class="card-container">
        <div class="card-input-wrapper">
            <p>Project Name</p>
            <InputText @bind-Value="@_registrationForm.Name" typeof="text" class="@(NameInvalid ? "w-100 invalid" : "w-100")"/>
        </div>

        <div class="card-input-wrapper-sbs">
            <div class="card-input-wrapper">
                <p>Start Date</p>
                <InputDate class="w-100" @bind-Value="@_registrationForm.StartDate"/>
            </div>
            <div class="card-input-wrapper">
                <p>End Date</p>
                <InputDate class="w-100" @bind-Value="_registrationForm.EndDate"/>
            </div>
        </div>

        <div>
            <p>Project Manager</p>
            <div class="card-input-wrapper-sbs">
                <InputSelect class="w-100" @bind-Value="@selectedEmployee" TValue="int">
                    @foreach (var employee in employees)
                    {
                        <option value="@employee.Id">@employee.FirstName @employee.LastName</option>
                    }
                </InputSelect>
                @* <p class="card-input-add-btn">+</p>  *@
            </div>
        </div>

        <div>
            <p>Customer</p>
            <div class="card-input-wrapper-sbs">
                <InputSelect class="w-100" @bind-Value="@selectedCustomer" TValue="int">
                    @foreach (var customer in customers)
                    {
                        @if (string.IsNullOrWhiteSpace(customer.CompanyName))
                        {
                            <option value="@customer.Id">@customer.FirstName @customer.LastName</option>
                        }
                        else
                        {
                            <option value="@customer.Id">@customer.CompanyName</option>
                        }
                    }
                </InputSelect>
                @* <p class="card-input-add-btn">+</p> *@
            </div>
        </div>

        <div class="card-input-wrapper-sbs">
            <div>
                <p>Service</p>
                <div class="card-input-wrapper-sbs">
                    <InputSelect class="w-100" @bind-Value="@selectedService" TValue="int">
                        @foreach (var service in services)
                        {
                            <option value="@service.Id">@service.Name (@decimal.Round(service.PricePerHour, 2) $/h)</option>
                        }
                    </InputSelect>
                    @* <p class="card-input-add-btn">+</p> *@
                </div>
            </div>
            <div class="card-input-number-cost-wrapper">
                <p>Total cost</p>
                <div>
                    <p>$</p>
                    <InputNumber @bind-Value="@_registrationForm.ServiceCost" class="@(CostInvalid ? "card-input-number-cost invalid" : "card-input-number-cost")"/>
                </div>
            </div>
        </div>

        <div>
            <p>Status</p>
            <div>
                <InputSelect class="w-100" @bind-Value="@selectedStatus" TValue="int">
                    @foreach (var status in statuses)
                    {
                        <option value="@status.Id">@status.StatusDescription</option>
                    }
                </InputSelect>
            </div>
        </div>

        <div>
            <p>Description</p>
            <div>
                <InputTextArea class="w-100" @bind-Value="@_registrationForm.Description" />
            </div>
        </div>

        <button class="card-input-submit-btn" @onclick="async ()=> await AddProjectToDb()">Add Project</button>
    </div>
</div>

@code {
    ProjectRegistrationForm _registrationForm = new();
    IEnumerable<Employee> employees = [];
    public int selectedEmployee = 1;
    public int selectedCustomer = 1;
    public int selectedStatus = 1;
    public int selectedService = 1;
    IEnumerable<Customer> customers = [];
    IEnumerable<Service> services = [];
    IEnumerable<Status> statuses = [];

    private bool NameInvalid = false;
    private bool CostInvalid = false;

    protected override async Task OnInitializedAsync()
    {
        await UpdateLists();
    }

    private async Task UpdateLists()
    {
        // Get all data from db
        services = await _serviceService.GetAllAsync();
        statuses = await _statusService.GetAllAsync();
        customers = await _customerService.GetAllAsync();
        employees = await _employeeService.GetAllAsync();

        // Set default index values for select elements
        if(services.Any())
            selectedService = services.Last().Id;
        if (statuses.Any())
            selectedStatus = statuses.Last().Id;
        if (customers.Any())
            selectedCustomer = customers.Last().Id;
        if (employees.Any())
            selectedEmployee = employees.Last().Id;
    }

    private async Task AddProjectToDb()
    {
        if (CheckInputs())
            return;

        // Set selected values to registration form
        _registrationForm.ManagerId = selectedEmployee;
        _registrationForm.ServiceId = selectedService;
        _registrationForm.CustomerId = selectedCustomer;
        _registrationForm.StatusId = selectedStatus;

        // Add project to db
        var result = await _projectService.CreateAsync(_registrationForm);
        if (result != null)
        {
            NavigateToProject();
        }
    }

    private bool CheckInputs()
    {
        bool InvalidExists = false;
        NameInvalid = false;
        CostInvalid = false;

        if (string.IsNullOrWhiteSpace(_registrationForm.Name))
        {
            NameInvalid = true;
            InvalidExists = true;
        }
        else
            _registrationForm.Name = _registrationForm.Name.Trim();

        if (_registrationForm.ServiceCost <= 0)
        {
            CostInvalid = true;
            InvalidExists = true;
        }

        return InvalidExists;
    }

    private void NavigateToProject()
    {
        _registrationForm = new();
        NavigationManager.NavigateTo($"/projects");
    }

    private async Task NavigateBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }
}
