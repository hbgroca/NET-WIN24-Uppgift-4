@page "/customers"

<div class=@(addUserMenuOpened ? "hidden" : "top-bar")>
    <div class="top-bar-adduser-text" @onclick="()=>{addUserMenuOpened = !addUserMenuOpened;}">
        <h6>Add customer</h6><h2>&#43;</h2>
    </div>
</div>
<div class=@(addUserMenuOpened ? "top-bar add-user" : "hidden")>
    <div class="top-bar-label">
        <h5>Add customer</h5>
        <button type="button" @onclick="()=>{addUserMenuOpened = !addUserMenuOpened;}">Cancel</button>
    </div>

    <div class="add-user-input-container">
        <div >
            <div class="add-user-input-field">
                <p>Organisation Id</p>
                <InputText @bind-Value="_registrationForm.OrganisationNumber" typeof="text" placeholder="Oranisation Id" />
            </div>
            <div class="add-user-input-field">
                <p>Company name</p>
                <InputText @bind-Value="_registrationForm.CompanyName" typeof="text" placeholder="Company name" />
            </div>
        </div>
        <div >
            <div class="add-user-input-field">
                <p>First name <span>(required)</span></p>
                <InputText @bind-Value="_registrationForm.FirstName" typeof="text" placeholder="First name..." />
            </div>
            <div class="add-user-input-field">
                <p>Last name <span>(required)</span></p>
                <InputText @bind-Value="_registrationForm.LastName" typeof="text" placeholder="Last name..." />
            </div>
        </div>
        <div >
            <div class="add-user-input-field">
                <p>Email <span>(required)</span></p>
                <InputText @bind-Value="_registrationForm.Email" typeof="text" placeholder="Email adress..." />
            </div>
            <div class="add-user-input-field">
                <p>Phone</p>
                <InputText @bind-Value="_registrationForm.Phone" typeof="text" placeholder="Phone number..." />
            </div>
        </div>

        <button type="button" @onclick="SubmitInputs">Add customer</button>
    </div>
</div>

<div class="customer-list-container">
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Org. number</th>
                <th>Company name</th>
                <th>First name</th>
                <th>Last name</th>
                <th>Email</th>
                <th>Phone</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (Customer customer in _customerlist)
            {
                @if (editModeEnabled && selectedCustomer == customer)
                {
                    <td class="py-4">@customer.Id</td>
                    <td class="py-4"><InputText @bind-Value="@customer.OrganisationNumber" typeof="text" placeholder="Organisation Nr" /></td>
                    <td class="py-4"><InputText @bind-Value="@customer.CompanyName" typeof="text" placeholder="Company name" /></td>
                    <td class="py-4"><InputText @bind-Value="@customer.FirstName" typeof="text" placeholder="First name" /></td>
                    <td class="py-4"><InputText @bind-Value="@customer.LastName" typeof="text" placeholder="Last name" /></td>
                    <td class="py-4"><InputText @bind-Value="@customer.Email" typeof="text" placeholder="Email adress" /></td>
                    <td class="py-4"><InputText @bind-Value="@customer.Phone" typeof="text" placeholder="Phone number" /></td>
                    <td class="py-4">
                        @if (!deleteConfirmEnabled)
                        {
                            <button @onclick="async ()=>{await SaveUpdatedToDb(customer);}">Save</button>
                            <button @onclick="async ()=>{await UpdateCustomerList();}">Cancel</button>
                            <button @onclick="()=>{deleteConfirmEnabled = true;}">Remove</button>
                        }
                        else
                        {
                            <p>Confirm delete</p>
                            <button @onclick="async ()=>{await RemoveCustomer(customer);}">Remove</button>
                            <button @onclick="()=>{deleteConfirmEnabled = false;}">Cancel</button>
                        }
                    </td>
                }
                else
                {
                    <tr class="hover-darken">
                        <td @onclick="async ()=>{await ToogleSelectedCustomer(customer);}">@customer.Id</td>
                        <td @onclick="async ()=>{await ToogleSelectedCustomer(customer);}">@customer.OrganisationNumber</td>
                        <td @onclick="async ()=>{await ToogleSelectedCustomer(customer);}">@customer.CompanyName</td>
                        <td @onclick="async ()=>{await ToogleSelectedCustomer(customer);}">@customer.FirstName</td>
                        <td @onclick="async ()=>{await ToogleSelectedCustomer(customer);}">@customer.LastName</td>
                        <td @onclick="async ()=>{await ToogleSelectedCustomer(customer);}">@customer.Email</td>
                        <td @onclick="async ()=>{await ToogleSelectedCustomer(customer);}">@customer.Phone</td>
                        <td><button @onclick="()=>{editModeEnabled = true; selectedCustomer = customer;}">Modify</button></td>
                    </tr>
                    @if(selectedCustomer == customer)
                    {
                        <div class="customers-projects-wrapper">
                            <h6>Connected projects</h6>
                            @if(_customerProjectList.Count == 0)
                            {
                                <p class="customers-projects">No connected projects</p>
                            }
                            else
                            {
                                @foreach (var project in _customerProjectList)
                                {
                                <div>
                                    <p class="customers-projects" @onclick="()=>{NavigateToProject(project.Id);}">(P-@project.Id) @project.Name</p>
                                </div>
                                }
                            }
                        </div>
                    }
                }
            }
        </tbody>
    </table>
</div>

@code {
    private CustomerRegistrationForm _registrationForm = new();
    private List<Customer> _customerlist = [];
    private List<Project> _customerProjectList = [];
    private bool addUserMenuOpened = false;
    private bool editModeEnabled = false;
    private bool deleteConfirmEnabled = false;
    private Customer selectedCustomer = null!;

    protected override async Task OnInitializedAsync()
    {
        await UpdateCustomerList();
    }

    private async Task ToogleSelectedCustomer(Customer customer)
    {
        if (selectedCustomer == customer)
        {
            selectedCustomer = null!;
        }
        else
        {
            var projects = await _projectService.GetProjectsByUserId(customer.Id);
            _customerProjectList = projects.ToList();
            selectedCustomer = customer;
        }
    }

    private async Task UpdateCustomerList()
    {
        // Reset all values
        deleteConfirmEnabled = false;
        editModeEnabled = false;
        selectedCustomer = null!;
        var x = await _customerService.GetAllAsync();
        _customerlist = x.ToList();
    }

    private async Task SubmitInputs()
    {
        if (string.IsNullOrWhiteSpace(_registrationForm.FirstName))
            return;
        if (string.IsNullOrWhiteSpace(_registrationForm.LastName))
            return;
        if (string.IsNullOrWhiteSpace(_registrationForm.Email))
            return;

        _registrationForm.Email = _registrationForm.Email.ToLower();

        var result = await _customerService.CreateAsync(_registrationForm);
        if (result != null)
        {
            UserAdded();
            await UpdateCustomerList();
        }

    }

    private void UserAdded()
    {
        _registrationForm = new();
        addUserMenuOpened = false;
    }

    private async Task SaveUpdatedToDb(Customer entity)
    {
        await _customerService.Update(entity);
        await UpdateCustomerList();
        editModeEnabled = false;
        selectedCustomer = null!;
    }

    private async Task RemoveCustomer(Customer customer)
    {
        await _customerService.Delete(customer);
        editModeEnabled = false;
        selectedCustomer = null!;
        await UpdateCustomerList();
    }

    private void NavigateToProject(int projectId)
    {
        NavigationManager.NavigateTo($"/projectview/{projectId}");
    }
}
